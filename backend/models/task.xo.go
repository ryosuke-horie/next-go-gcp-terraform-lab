package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Task represents a row from 'public.tasks'.
type Task struct {
	ID          int            `json:"id"`           // id
	Title       string         `json:"title"`        // title
	Detail      sql.NullString `json:"detail"`       // detail
	IsCompleted bool           `json:"is_completed"` // is_completed
	CreatedAt   time.Time      `json:"created_at"`   // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Task] exists in the database.
func (t *Task) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Task] has been marked for deletion
// from the database.
func (t *Task) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Task] to the database.
func (t *Task) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.tasks (` +
		`title, detail, is_completed, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, t.Title, t.Detail, t.IsCompleted, t.CreatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, t.Title, t.Detail, t.IsCompleted, t.CreatedAt).Scan(&t.ID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Task] in the database.
func (t *Task) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tasks SET ` +
		`title = $1, detail = $2, is_completed = $3, created_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, t.Title, t.Detail, t.IsCompleted, t.CreatedAt, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.Title, t.Detail, t.IsCompleted, t.CreatedAt, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Task] to the database.
func (t *Task) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Task].
func (t *Task) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tasks (` +
		`id, title, detail, is_completed, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`title = EXCLUDED.title, detail = EXCLUDED.detail, is_completed = EXCLUDED.is_completed, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, t.ID, t.Title, t.Detail, t.IsCompleted, t.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.Title, t.Detail, t.IsCompleted, t.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Task] from the database.
func (t *Task) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tasks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TaskByID retrieves a row from 'public.tasks' as a [Task].
//
// Generated from index 'tasks_pkey'.
func TaskByID(ctx context.Context, db DB, id int) (*Task, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, title, detail, is_completed, created_at ` +
		`FROM public.tasks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	t := Task{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.Title, &t.Detail, &t.IsCompleted, &t.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}
